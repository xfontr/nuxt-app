import { readFile, writeFile } from "fs/promises";
import { join } from "path";
import { randomUUID } from "crypto";

const REM_TO_PX = 16;

const BASE_PATH = "./assets/scss/";

const PATHS = {
    breakpoints: `${BASE_PATH}/variables/_breakpoints.scss`,
    distances: `${BASE_PATH}/variables/_distances.scss`,
    fonts: `${BASE_PATH}/variables/_fonts.scss`,
    colors: "_temp.css", // Warning: must be compiled externally
};

const OUTCOME_FILE = "configs";

const getFile = async (path) => await readFile(path, "utf8");
const createTsFile = async (path, data) =>
    await writeFile(join(OUTCOME_FILE, `${path}.ts`), data);

const toTs = ([name, value]) => {
    if (value.includes("rem;")) {
        return `/** In px */
export const ${name}: number = ${
            +value.trim().replace("rem", "") * REM_TO_PX
        };`;
    }

    if (Number.isNaN(+value)) {
        return `export const ${name}: string = "${value.trim()}";`;
    }

    return `export const ${name}: number = ${value.trim()};`;
};

const parseScssVariable = (variable) => {
    const [name, value] = variable
        .replace("$", "")
        .replace(";", "")
        .replaceAll('"', "'")
        .split(":");

    const cleanName = name.replaceAll("-", "_").toLocaleUpperCase();

    return [cleanName, value];
};

const toCamelCase = (text) =>
    text.replace(/-([a-z])/g, (g) => g[1].toUpperCase());

const parseCss = (css) =>
    css.split("body.").flatMap((theme) => {
        if (!theme.startsWith("theme")) return [];

        let currentTheme = "";

        const themes = theme
            .split("\n")
            .flatMap((variable, i) => {
                if (!i)
                    currentTheme = variable
                        .replace(" {", "")
                        .toLocaleUpperCase()
                        .replaceAll("-", "_");
                if (!variable.trim().startsWith("--")) return [];

                const [name, value] = variable
                    .replace("--", "")
                    .replace(";", "")
                    .split(":");

                return [[toCamelCase(name.trim()), value]];
            })
            .reduce(
                (allColors, [name, value]) => ({
                    [currentTheme]: {
                        ...allColors[currentTheme],
                        [name]: value,
                    },
                }),
                { [currentTheme]: {} },
            );

        return Object.keys(themes).map(
            (theme) =>
                `export const ${theme} = ${JSON.stringify(
                    themes[theme],
                    null,
                    4,
                )}\n`,
        );
    });

const headerTemplate = (data) => `/*
*
* WARNING: Any changes here could get overriden.
* This file was autogenerated.
*
* ${randomUUID()}
*
*/

${data}
`;

(async () => {
    const rawFiles = await Promise.all(
        Object.entries(PATHS).map(async ([name, path]) => ({
            name,
            rawFile: await getFile(path),
        })),
    );

    await Promise.all(
        rawFiles.map(async ({ rawFile, name }) => {
            if (name === "colors") {
                await createTsFile(
                    name,
                    headerTemplate(parseCss(rawFile).join("\n")),
                );
                return;
            }

            await createTsFile(
                name,
                headerTemplate(
                    rawFile
                        .split("\n")
                        .filter((line) => line.startsWith("$"))
                        .map(parseScssVariable)
                        .map(toTs)
                        .join("\n"),
                ),
            );
        }),
    );
})();
